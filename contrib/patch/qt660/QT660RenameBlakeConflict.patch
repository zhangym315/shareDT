diff --git a/src/3rdparty/blake2/src/blake2.h b/src/3rdparty/blake2/src/blake2.h
index ca390305e6..6464e65d6e 100644
--- a/src/3rdparty/blake2/src/blake2.h
+++ b/src/3rdparty/blake2/src/blake2.h
@@ -28,7 +28,7 @@
 extern "C" {
 #endif
 
-  enum blake2s_constant
+  enum QT6_blake2s_constant
   {
     BLAKE2S_BLOCKBYTES = 64,
     BLAKE2S_OUTBYTES   = 32,
@@ -37,7 +37,7 @@ extern "C" {
     BLAKE2S_PERSONALBYTES = 8
   };
 
-  enum blake2b_constant
+  enum QT6_blake2b_constant
   {
     BLAKE2B_BLOCKBYTES = 128,
     BLAKE2B_OUTBYTES   = 64,
@@ -46,7 +46,7 @@ extern "C" {
     BLAKE2B_PERSONALBYTES = 16
   };
 
-  typedef struct blake2s_state__
+  typedef struct QT6_blake2s_state__
   {
     uint32_t h[8];
     uint32_t t[2];
@@ -55,9 +55,9 @@ extern "C" {
     size_t   buflen;
     size_t   outlen;
     uint8_t  last_node;
-  } blake2s_state;
+  } QT6_blake2s_state;
 
-  typedef struct blake2b_state__
+  typedef struct QT6_blake2b_state__
   {
     uint64_t h[8];
     uint64_t t[2];
@@ -66,12 +66,12 @@ extern "C" {
     size_t   buflen;
     size_t   outlen;
     uint8_t  last_node;
-  } blake2b_state;
+  } QT6_blake2b_state;
 
   typedef struct blake2sp_state__
   {
-    blake2s_state S[8][1];
-    blake2s_state R[1];
+    QT6_blake2s_state S[8][1];
+    QT6_blake2s_state R[1];
     uint8_t       buf[8 * BLAKE2S_BLOCKBYTES];
     size_t        buflen;
     size_t        outlen;
@@ -79,15 +79,15 @@ extern "C" {
 
   typedef struct blake2bp_state__
   {
-    blake2b_state S[4][1];
-    blake2b_state R[1];
+    QT6_blake2b_state S[4][1];
+    QT6_blake2b_state R[1];
     uint8_t       buf[4 * BLAKE2B_BLOCKBYTES];
     size_t        buflen;
     size_t        outlen;
   } blake2bp_state;
 
 
-  BLAKE2_PACKED(struct blake2s_param__
+  BLAKE2_PACKED(struct QT6_blake2s_param__
   {
     uint8_t  digest_length; /* 1 */
     uint8_t  key_length;    /* 2 */
@@ -103,9 +103,9 @@ extern "C" {
     uint8_t  personal[BLAKE2S_PERSONALBYTES];  /* 32 */
   });
 
-  typedef struct blake2s_param__ blake2s_param;
+  typedef struct QT6_blake2s_param__ QT6_blake2s_param;
 
-  BLAKE2_PACKED(struct blake2b_param__
+  BLAKE2_PACKED(struct QT6_blake2b_param__
   {
     uint8_t  digest_length; /* 1 */
     uint8_t  key_length;    /* 2 */
@@ -121,38 +121,38 @@ extern "C" {
     uint8_t  personal[BLAKE2B_PERSONALBYTES];  /* 64 */
   });
 
-  typedef struct blake2b_param__ blake2b_param;
+  typedef struct QT6_blake2b_param__ QT6_blake2b_param;
 
   typedef struct blake2xs_state__
   {
-    blake2s_state S[1];
-    blake2s_param P[1];
+    QT6_blake2s_state S[1];
+    QT6_blake2s_param P[1];
   } blake2xs_state;
 
   typedef struct blake2xb_state__
   {
-    blake2b_state S[1];
-    blake2b_param P[1];
+    QT6_blake2b_state S[1];
+    QT6_blake2b_param P[1];
   } blake2xb_state;
 
   /* Padded structs result in a compile-time error */
   enum {
-    BLAKE2_DUMMY_1 = 1/(int)(sizeof(blake2s_param) == BLAKE2S_OUTBYTES),
-    BLAKE2_DUMMY_2 = 1/(int)(sizeof(blake2b_param) == BLAKE2B_OUTBYTES)
+    BLAKE2_DUMMY_1 = 1/(int)(sizeof(QT6_blake2s_param) == BLAKE2S_OUTBYTES),
+    BLAKE2_DUMMY_2 = 1/(int)(sizeof(QT6_blake2b_param) == BLAKE2B_OUTBYTES)
   };
 
   /* Streaming API */
-  int blake2s_init( blake2s_state *S, size_t outlen );
-  int blake2s_init_key( blake2s_state *S, size_t outlen, const void *key, size_t keylen );
-  int blake2s_init_param( blake2s_state *S, const blake2s_param *P );
-  int blake2s_update( blake2s_state *S, const void *in, size_t inlen );
-  int blake2s_final( blake2s_state *S, void *out, size_t outlen );
-
-  int blake2b_init( blake2b_state *S, size_t outlen );
-  int blake2b_init_key( blake2b_state *S, size_t outlen, const void *key, size_t keylen );
-  int blake2b_init_param( blake2b_state *S, const blake2b_param *P );
-  int blake2b_update( blake2b_state *S, const void *in, size_t inlen );
-  int blake2b_final( blake2b_state *S, void *out, size_t outlen );
+  int QT6_blake2s_init( QT6_blake2s_state *S, size_t outlen );
+  int QT6_blake2s_init_key( QT6_blake2s_state *S, size_t outlen, const void *key, size_t keylen );
+  int QT6_blake2s_init_param( QT6_blake2s_state *S, const QT6_blake2s_param *P );
+  int QT6_blake2s_update( QT6_blake2s_state *S, const void *in, size_t inlen );
+  int QT6_blake2s_final( QT6_blake2s_state *S, void *out, size_t outlen );
+
+  int QT6_blake2b_init( QT6_blake2b_state *S, size_t outlen );
+  int QT6_blake2b_init_key( QT6_blake2b_state *S, size_t outlen, const void *key, size_t keylen );
+  int QT6_blake2b_init_param( QT6_blake2b_state *S, const QT6_blake2b_param *P );
+  int QT6_blake2b_update( QT6_blake2b_state *S, const void *in, size_t inlen );
+  int QT6_blake2b_final( QT6_blake2b_state *S, void *out, size_t outlen );
 
   int blake2sp_init( blake2sp_state *S, size_t outlen );
   int blake2sp_init_key( blake2sp_state *S, size_t outlen, const void *key, size_t keylen );
diff --git a/src/3rdparty/blake2/src/blake2b-ref.c b/src/3rdparty/blake2/src/blake2b-ref.c
index cd38b1ba00..09c5b9a361 100644
--- a/src/3rdparty/blake2/src/blake2b-ref.c
+++ b/src/3rdparty/blake2/src/blake2b-ref.c
@@ -20,7 +20,7 @@
 #include "blake2.h"
 #include "blake2-impl.h"
 
-static const uint64_t blake2b_IV[8] =
+static const uint64_t QT6_blake2b_IV[8] =
 {
   0x6a09e667f3bcc908ULL, 0xbb67ae8584caa73bULL,
   0x3c6ef372fe94f82bULL, 0xa54ff53a5f1d36f1ULL,
@@ -28,7 +28,7 @@ static const uint64_t blake2b_IV[8] =
   0x1f83d9abfb41bd6bULL, 0x5be0cd19137e2179ULL
 };
 
-static const uint8_t blake2b_sigma[12][16] =
+static const uint8_t QT6_blake2b_sigma[12][16] =
 {
   {  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15 } ,
   { 14, 10,  4,  8,  9, 15, 13,  6,  1, 12,  0,  2, 11,  7,  5,  3 } ,
@@ -45,45 +45,45 @@ static const uint8_t blake2b_sigma[12][16] =
 };
 
 
-static void blake2b_set_lastnode( blake2b_state *S )
+static void QT6_blake2b_set_lastnode( QT6_blake2b_state *S )
 {
   S->f[1] = (uint64_t)-1;
 }
 
 /* Some helper functions, not necessarily useful */
-static int blake2b_is_lastblock( const blake2b_state *S )
+static int QT6_blake2b_is_lastblock( const QT6_blake2b_state *S )
 {
   return S->f[0] != 0;
 }
 
-static void blake2b_set_lastblock( blake2b_state *S )
+static void QT6_blake2b_set_lastblock( QT6_blake2b_state *S )
 {
-  if( S->last_node ) blake2b_set_lastnode( S );
+  if( S->last_node ) QT6_blake2b_set_lastnode( S );
 
   S->f[0] = (uint64_t)-1;
 }
 
-static void blake2b_increment_counter( blake2b_state *S, const uint64_t inc )
+static void QT6_blake2b_increment_counter( QT6_blake2b_state *S, const uint64_t inc )
 {
   S->t[0] += inc;
   S->t[1] += ( S->t[0] < inc );
 }
 
-static void blake2b_init0( blake2b_state *S )
+static void QT6_blake2b_init0( QT6_blake2b_state *S )
 {
   size_t i;
-  memset( S, 0, sizeof( blake2b_state ) );
+  memset( S, 0, sizeof( QT6_blake2b_state ) );
 
-  for( i = 0; i < 8; ++i ) S->h[i] = blake2b_IV[i];
+  for( i = 0; i < 8; ++i ) S->h[i] = QT6_blake2b_IV[i];
 }
 
 /* init xors IV with input parameter block */
-int blake2b_init_param( blake2b_state *S, const blake2b_param *P )
+int QT6_blake2b_init_param( QT6_blake2b_state *S, const QT6_blake2b_param *P )
 {
   const uint8_t *p = ( const uint8_t * )( P );
   size_t i;
 
-  blake2b_init0( S );
+  QT6_blake2b_init0( S );
 
   /* IV XOR ParamBlock */
   for( i = 0; i < 8; ++i )
@@ -95,9 +95,9 @@ int blake2b_init_param( blake2b_state *S, const blake2b_param *P )
 
 
 
-int blake2b_init( blake2b_state *S, size_t outlen )
+int QT6_blake2b_init( QT6_blake2b_state *S, size_t outlen )
 {
-  blake2b_param P[1];
+  QT6_blake2b_param P[1];
 
   if ( ( !outlen ) || ( outlen > BLAKE2B_OUTBYTES ) ) return -1;
 
@@ -113,13 +113,13 @@ int blake2b_init( blake2b_state *S, size_t outlen )
   memset( P->reserved, 0, sizeof( P->reserved ) );
   memset( P->salt,     0, sizeof( P->salt ) );
   memset( P->personal, 0, sizeof( P->personal ) );
-  return blake2b_init_param( S, P );
+  return QT6_blake2b_init_param( S, P );
 }
 
 
-int blake2b_init_key( blake2b_state *S, size_t outlen, const void *key, size_t keylen )
+int QT6_blake2b_init_key( QT6_blake2b_state *S, size_t outlen, const void *key, size_t keylen )
 {
-  blake2b_param P[1];
+  QT6_blake2b_param P[1];
 
   if ( ( !outlen ) || ( outlen > BLAKE2B_OUTBYTES ) ) return -1;
 
@@ -138,13 +138,13 @@ int blake2b_init_key( blake2b_state *S, size_t outlen, const void *key, size_t k
   memset( P->salt,     0, sizeof( P->salt ) );
   memset( P->personal, 0, sizeof( P->personal ) );
 
-  if( blake2b_init_param( S, P ) < 0 ) return -1;
+  if( QT6_blake2b_init_param( S, P ) < 0 ) return -1;
 
   {
     uint8_t block[BLAKE2B_BLOCKBYTES];
     memset( block, 0, BLAKE2B_BLOCKBYTES );
     memcpy( block, key, keylen );
-    blake2b_update( S, block, BLAKE2B_BLOCKBYTES );
+    QT6_blake2b_update( S, block, BLAKE2B_BLOCKBYTES );
     secure_zero_memory( block, BLAKE2B_BLOCKBYTES ); /* Burn the key from stack */
   }
   return 0;
@@ -152,11 +152,11 @@ int blake2b_init_key( blake2b_state *S, size_t outlen, const void *key, size_t k
 
 #define G(r,i,a,b,c,d)                      \
   do {                                      \
-    a = a + b + m[blake2b_sigma[r][2*i+0]]; \
+    a = a + b + m[QT6_blake2b_sigma[r][2*i+0]]; \
     d = rotr64(d ^ a, 32);                  \
     c = c + d;                              \
     b = rotr64(b ^ c, 24);                  \
-    a = a + b + m[blake2b_sigma[r][2*i+1]]; \
+    a = a + b + m[QT6_blake2b_sigma[r][2*i+1]]; \
     d = rotr64(d ^ a, 16);                  \
     c = c + d;                              \
     b = rotr64(b ^ c, 63);                  \
@@ -174,7 +174,7 @@ int blake2b_init_key( blake2b_state *S, size_t outlen, const void *key, size_t k
     G(r,7,v[ 3],v[ 4],v[ 9],v[14]); \
   } while(0)
 
-static void blake2b_compress( blake2b_state *S, const uint8_t block[BLAKE2B_BLOCKBYTES] )
+static void QT6_blake2b_compress( QT6_blake2b_state *S, const uint8_t block[BLAKE2B_BLOCKBYTES] )
 {
   uint64_t m[16];
   uint64_t v[16];
@@ -188,14 +188,14 @@ static void blake2b_compress( blake2b_state *S, const uint8_t block[BLAKE2B_BLOC
     v[i] = S->h[i];
   }
 
-  v[ 8] = blake2b_IV[0];
-  v[ 9] = blake2b_IV[1];
-  v[10] = blake2b_IV[2];
-  v[11] = blake2b_IV[3];
-  v[12] = blake2b_IV[4] ^ S->t[0];
-  v[13] = blake2b_IV[5] ^ S->t[1];
-  v[14] = blake2b_IV[6] ^ S->f[0];
-  v[15] = blake2b_IV[7] ^ S->f[1];
+  v[ 8] = QT6_blake2b_IV[0];
+  v[ 9] = QT6_blake2b_IV[1];
+  v[10] = QT6_blake2b_IV[2];
+  v[11] = QT6_blake2b_IV[3];
+  v[12] = QT6_blake2b_IV[4] ^ S->t[0];
+  v[13] = QT6_blake2b_IV[5] ^ S->t[1];
+  v[14] = QT6_blake2b_IV[6] ^ S->f[0];
+  v[15] = QT6_blake2b_IV[7] ^ S->f[1];
 
   ROUND( 0 );
   ROUND( 1 );
@@ -218,7 +218,7 @@ static void blake2b_compress( blake2b_state *S, const uint8_t block[BLAKE2B_BLOC
 #undef G
 #undef ROUND
 
-int blake2b_update( blake2b_state *S, const void *pin, size_t inlen )
+int QT6_blake2b_update( QT6_blake2b_state *S, const void *pin, size_t inlen )
 {
   const unsigned char * in = (const unsigned char *)pin;
   if( inlen > 0 )
@@ -229,12 +229,12 @@ int blake2b_update( blake2b_state *S, const void *pin, size_t inlen )
     {
       S->buflen = 0;
       memcpy( S->buf + left, in, fill ); /* Fill buffer */
-      blake2b_increment_counter( S, BLAKE2B_BLOCKBYTES );
-      blake2b_compress( S, S->buf ); /* Compress */
+      QT6_blake2b_increment_counter( S, BLAKE2B_BLOCKBYTES );
+      QT6_blake2b_compress( S, S->buf ); /* Compress */
       in += fill; inlen -= fill;
       while(inlen > BLAKE2B_BLOCKBYTES) {
-        blake2b_increment_counter(S, BLAKE2B_BLOCKBYTES);
-        blake2b_compress( S, in );
+        QT6_blake2b_increment_counter(S, BLAKE2B_BLOCKBYTES);
+        QT6_blake2b_compress( S, in );
         in += BLAKE2B_BLOCKBYTES;
         inlen -= BLAKE2B_BLOCKBYTES;
       }
@@ -245,7 +245,7 @@ int blake2b_update( blake2b_state *S, const void *pin, size_t inlen )
   return 0;
 }
 
-int blake2b_final( blake2b_state *S, void *out, size_t outlen )
+int QT6_blake2b_final( QT6_blake2b_state *S, void *out, size_t outlen )
 {
   uint8_t buffer[BLAKE2B_OUTBYTES] = {0};
   size_t i;
@@ -253,13 +253,13 @@ int blake2b_final( blake2b_state *S, void *out, size_t outlen )
   if( out == NULL || outlen < S->outlen )
     return -1;
 
-  if( blake2b_is_lastblock( S ) )
+  if( QT6_blake2b_is_lastblock( S ) )
     return -1;
 
-  blake2b_increment_counter( S, S->buflen );
-  blake2b_set_lastblock( S );
+  QT6_blake2b_increment_counter( S, S->buflen );
+  QT6_blake2b_set_lastblock( S );
   memset( S->buf + S->buflen, 0, BLAKE2B_BLOCKBYTES - S->buflen ); /* Padding */
-  blake2b_compress( S, S->buf );
+  QT6_blake2b_compress( S, S->buf );
 
   for( i = 0; i < 8; ++i ) /* Output full hash to temp buffer */
     store64( buffer + sizeof( S->h[i] ) * i, S->h[i] );
@@ -272,7 +272,7 @@ int blake2b_final( blake2b_state *S, void *out, size_t outlen )
 /* inlen, at least, should be uint64_t. Others can be size_t. */
 int blake2b( void *out, size_t outlen, const void *in, size_t inlen, const void *key, size_t keylen )
 {
-  blake2b_state S[1];
+  QT6_blake2b_state S[1];
 
   /* Verify parameters */
   if ( NULL == in && inlen > 0 ) return -1;
@@ -287,15 +287,15 @@ int blake2b( void *out, size_t outlen, const void *in, size_t inlen, const void
 
   if( keylen > 0 )
   {
-    if( blake2b_init_key( S, outlen, key, keylen ) < 0 ) return -1;
+    if( QT6_blake2b_init_key( S, outlen, key, keylen ) < 0 ) return -1;
   }
   else
   {
-    if( blake2b_init( S, outlen ) < 0 ) return -1;
+    if( QT6_blake2b_init( S, outlen ) < 0 ) return -1;
   }
 
-  blake2b_update( S, ( const uint8_t * )in, inlen );
-  blake2b_final( S, out, outlen );
+  QT6_blake2b_update( S, ( const uint8_t * )in, inlen );
+  QT6_blake2b_final( S, out, outlen );
   return 0;
 }
 
@@ -331,7 +331,7 @@ int main( void )
     uint8_t hash[BLAKE2B_OUTBYTES];
     blake2b( hash, BLAKE2B_OUTBYTES, buf, i, key, BLAKE2B_KEYBYTES );
 
-    if( 0 != memcmp( hash, blake2b_keyed_kat[i], BLAKE2B_OUTBYTES ) )
+    if( 0 != memcmp( hash, QT6_blake2b_keyed_kat[i], BLAKE2B_OUTBYTES ) )
     {
       goto fail;
     }
@@ -341,30 +341,30 @@ int main( void )
   for(step = 1; step < BLAKE2B_BLOCKBYTES; ++step) {
     for (i = 0; i < BLAKE2_KAT_LENGTH; ++i) {
       uint8_t hash[BLAKE2B_OUTBYTES];
-      blake2b_state S;
+      QT6_blake2b_state S;
       uint8_t * p = buf;
       size_t mlen = i;
       int err = 0;
 
-      if( (err = blake2b_init_key(&S, BLAKE2B_OUTBYTES, key, BLAKE2B_KEYBYTES)) < 0 ) {
+      if( (err = QT6_blake2b_init_key(&S, BLAKE2B_OUTBYTES, key, BLAKE2B_KEYBYTES)) < 0 ) {
         goto fail;
       }
 
       while (mlen >= step) {
-        if ( (err = blake2b_update(&S, p, step)) < 0 ) {
+        if ( (err = QT6_blake2b_update(&S, p, step)) < 0 ) {
           goto fail;
         }
         mlen -= step;
         p += step;
       }
-      if ( (err = blake2b_update(&S, p, mlen)) < 0) {
+      if ( (err = QT6_blake2b_update(&S, p, mlen)) < 0) {
         goto fail;
       }
-      if ( (err = blake2b_final(&S, hash, BLAKE2B_OUTBYTES)) < 0) {
+      if ( (err = QT6_blake2b_final(&S, hash, BLAKE2B_OUTBYTES)) < 0) {
         goto fail;
       }
 
-      if (0 != memcmp(hash, blake2b_keyed_kat[i], BLAKE2B_OUTBYTES)) {
+      if (0 != memcmp(hash, QT6_blake2b_keyed_kat[i], BLAKE2B_OUTBYTES)) {
         goto fail;
       }
     }
diff --git a/src/3rdparty/blake2/src/blake2s-ref.c b/src/3rdparty/blake2/src/blake2s-ref.c
index c8b035f621..7572ea9c72 100644
--- a/src/3rdparty/blake2/src/blake2s-ref.c
+++ b/src/3rdparty/blake2/src/blake2s-ref.c
@@ -20,13 +20,13 @@
 #include "blake2.h"
 #include "blake2-impl.h"
 
-static const uint32_t blake2s_IV[8] =
+static const uint32_t QT6_blake2s_IV[8] =
 {
   0x6A09E667UL, 0xBB67AE85UL, 0x3C6EF372UL, 0xA54FF53AUL,
   0x510E527FUL, 0x9B05688CUL, 0x1F83D9ABUL, 0x5BE0CD19UL
 };
 
-static const uint8_t blake2s_sigma[10][16] =
+static const uint8_t QT6_blake2s_sigma[10][16] =
 {
   {  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15 } ,
   { 14, 10,  4,  8,  9, 15, 13,  6,  1, 12,  0,  2, 11,  7,  5,  3 } ,
@@ -40,45 +40,45 @@ static const uint8_t blake2s_sigma[10][16] =
   { 10,  2,  8,  4,  7,  6,  1,  5, 15, 11,  9, 14,  3, 12, 13 , 0 } ,
 };
 
-static void blake2s_set_lastnode( blake2s_state *S )
+static void QT6_blake2s_set_lastnode( QT6_blake2s_state *S )
 {
   S->f[1] = (uint32_t)-1;
 }
 
 /* Some helper functions, not necessarily useful */
-static int blake2s_is_lastblock( const blake2s_state *S )
+static int QT6_blake2s_is_lastblock( const QT6_blake2s_state *S )
 {
   return S->f[0] != 0;
 }
 
-static void blake2s_set_lastblock( blake2s_state *S )
+static void QT6_blake2s_set_lastblock( QT6_blake2s_state *S )
 {
-  if( S->last_node ) blake2s_set_lastnode( S );
+  if( S->last_node ) QT6_blake2s_set_lastnode( S );
 
   S->f[0] = (uint32_t)-1;
 }
 
-static void blake2s_increment_counter( blake2s_state *S, const uint32_t inc )
+static void QT6_blake2s_increment_counter( QT6_blake2s_state *S, const uint32_t inc )
 {
   S->t[0] += inc;
   S->t[1] += ( S->t[0] < inc );
 }
 
-static void blake2s_init0( blake2s_state *S )
+static void QT6_blake2s_init0( QT6_blake2s_state *S )
 {
   size_t i;
-  memset( S, 0, sizeof( blake2s_state ) );
+  memset( S, 0, sizeof( QT6_blake2s_state ) );
 
-  for( i = 0; i < 8; ++i ) S->h[i] = blake2s_IV[i];
+  for( i = 0; i < 8; ++i ) S->h[i] = QT6_blake2s_IV[i];
 }
 
 /* init2 xors IV with input parameter block */
-int blake2s_init_param( blake2s_state *S, const blake2s_param *P )
+int QT6_blake2s_init_param( QT6_blake2s_state *S, const QT6_blake2s_param *P )
 {
   const unsigned char *p = ( const unsigned char * )( P );
   size_t i;
 
-  blake2s_init0( S );
+  QT6_blake2s_init0( S );
 
   /* IV XOR ParamBlock */
   for( i = 0; i < 8; ++i )
@@ -90,9 +90,9 @@ int blake2s_init_param( blake2s_state *S, const blake2s_param *P )
 
 
 /* Sequential blake2s initialization */
-int blake2s_init( blake2s_state *S, size_t outlen )
+int QT6_blake2s_init( QT6_blake2s_state *S, size_t outlen )
 {
-  blake2s_param P[1];
+  QT6_blake2s_param P[1];
 
   /* Move interval verification here? */
   if ( ( !outlen ) || ( outlen > BLAKE2S_OUTBYTES ) ) return -1;
@@ -109,12 +109,12 @@ int blake2s_init( blake2s_state *S, size_t outlen )
   /* memset(P->reserved, 0, sizeof(P->reserved) ); */
   memset( P->salt,     0, sizeof( P->salt ) );
   memset( P->personal, 0, sizeof( P->personal ) );
-  return blake2s_init_param( S, P );
+  return QT6_blake2s_init_param( S, P );
 }
 
-int blake2s_init_key( blake2s_state *S, size_t outlen, const void *key, size_t keylen )
+int QT6_blake2s_init_key( QT6_blake2s_state *S, size_t outlen, const void *key, size_t keylen )
 {
-  blake2s_param P[1];
+  QT6_blake2s_param P[1];
 
   if ( ( !outlen ) || ( outlen > BLAKE2S_OUTBYTES ) ) return -1;
 
@@ -133,13 +133,13 @@ int blake2s_init_key( blake2s_state *S, size_t outlen, const void *key, size_t k
   memset( P->salt,     0, sizeof( P->salt ) );
   memset( P->personal, 0, sizeof( P->personal ) );
 
-  if( blake2s_init_param( S, P ) < 0 ) return -1;
+  if( QT6_blake2s_init_param( S, P ) < 0 ) return -1;
 
   {
     uint8_t block[BLAKE2S_BLOCKBYTES];
     memset( block, 0, BLAKE2S_BLOCKBYTES );
     memcpy( block, key, keylen );
-    blake2s_update( S, block, BLAKE2S_BLOCKBYTES );
+    QT6_blake2s_update( S, block, BLAKE2S_BLOCKBYTES );
     secure_zero_memory( block, BLAKE2S_BLOCKBYTES ); /* Burn the key from stack */
   }
   return 0;
@@ -147,11 +147,11 @@ int blake2s_init_key( blake2s_state *S, size_t outlen, const void *key, size_t k
 
 #define G(r,i,a,b,c,d)                      \
   do {                                      \
-    a = a + b + m[blake2s_sigma[r][2*i+0]]; \
+    a = a + b + m[QT6_blake2s_sigma[r][2*i+0]]; \
     d = rotr32(d ^ a, 16);                  \
     c = c + d;                              \
     b = rotr32(b ^ c, 12);                  \
-    a = a + b + m[blake2s_sigma[r][2*i+1]]; \
+    a = a + b + m[QT6_blake2s_sigma[r][2*i+1]]; \
     d = rotr32(d ^ a, 8);                   \
     c = c + d;                              \
     b = rotr32(b ^ c, 7);                   \
@@ -169,7 +169,7 @@ int blake2s_init_key( blake2s_state *S, size_t outlen, const void *key, size_t k
     G(r,7,v[ 3],v[ 4],v[ 9],v[14]); \
   } while(0)
 
-static void blake2s_compress( blake2s_state *S, const uint8_t in[BLAKE2S_BLOCKBYTES] )
+static void QT6_blake2s_compress( QT6_blake2s_state *S, const uint8_t in[BLAKE2S_BLOCKBYTES] )
 {
   uint32_t m[16];
   uint32_t v[16];
@@ -183,14 +183,14 @@ static void blake2s_compress( blake2s_state *S, const uint8_t in[BLAKE2S_BLOCKBY
     v[i] = S->h[i];
   }
 
-  v[ 8] = blake2s_IV[0];
-  v[ 9] = blake2s_IV[1];
-  v[10] = blake2s_IV[2];
-  v[11] = blake2s_IV[3];
-  v[12] = S->t[0] ^ blake2s_IV[4];
-  v[13] = S->t[1] ^ blake2s_IV[5];
-  v[14] = S->f[0] ^ blake2s_IV[6];
-  v[15] = S->f[1] ^ blake2s_IV[7];
+  v[ 8] = QT6_blake2s_IV[0];
+  v[ 9] = QT6_blake2s_IV[1];
+  v[10] = QT6_blake2s_IV[2];
+  v[11] = QT6_blake2s_IV[3];
+  v[12] = S->t[0] ^ QT6_blake2s_IV[4];
+  v[13] = S->t[1] ^ QT6_blake2s_IV[5];
+  v[14] = S->f[0] ^ QT6_blake2s_IV[6];
+  v[15] = S->f[1] ^ QT6_blake2s_IV[7];
 
   ROUND( 0 );
   ROUND( 1 );
@@ -211,7 +211,7 @@ static void blake2s_compress( blake2s_state *S, const uint8_t in[BLAKE2S_BLOCKBY
 #undef G
 #undef ROUND
 
-int blake2s_update( blake2s_state *S, const void *pin, size_t inlen )
+int QT6_blake2s_update( QT6_blake2s_state *S, const void *pin, size_t inlen )
 {
   const unsigned char * in = (const unsigned char *)pin;
   if( inlen > 0 )
@@ -222,12 +222,12 @@ int blake2s_update( blake2s_state *S, const void *pin, size_t inlen )
     {
       S->buflen = 0;
       memcpy( S->buf + left, in, fill ); /* Fill buffer */
-      blake2s_increment_counter( S, BLAKE2S_BLOCKBYTES );
-      blake2s_compress( S, S->buf ); /* Compress */
+      QT6_blake2s_increment_counter( S, BLAKE2S_BLOCKBYTES );
+      QT6_blake2s_compress( S, S->buf ); /* Compress */
       in += fill; inlen -= fill;
       while(inlen > BLAKE2S_BLOCKBYTES) {
-        blake2s_increment_counter(S, BLAKE2S_BLOCKBYTES);
-        blake2s_compress( S, in );
+        QT6_blake2s_increment_counter(S, BLAKE2S_BLOCKBYTES);
+        QT6_blake2s_compress( S, in );
         in += BLAKE2S_BLOCKBYTES;
         inlen -= BLAKE2S_BLOCKBYTES;
       }
@@ -238,7 +238,7 @@ int blake2s_update( blake2s_state *S, const void *pin, size_t inlen )
   return 0;
 }
 
-int blake2s_final( blake2s_state *S, void *out, size_t outlen )
+int QT6_blake2s_final( QT6_blake2s_state *S, void *out, size_t outlen )
 {
   uint8_t buffer[BLAKE2S_OUTBYTES] = {0};
   size_t i;
@@ -246,13 +246,13 @@ int blake2s_final( blake2s_state *S, void *out, size_t outlen )
   if( out == NULL || outlen < S->outlen )
     return -1;
 
-  if( blake2s_is_lastblock( S ) )
+  if( QT6_blake2s_is_lastblock( S ) )
     return -1;
 
-  blake2s_increment_counter( S, ( uint32_t )S->buflen );
-  blake2s_set_lastblock( S );
+  QT6_blake2s_increment_counter( S, ( uint32_t )S->buflen );
+  QT6_blake2s_set_lastblock( S );
   memset( S->buf + S->buflen, 0, BLAKE2S_BLOCKBYTES - S->buflen ); /* Padding */
-  blake2s_compress( S, S->buf );
+  QT6_blake2s_compress( S, S->buf );
 
   for( i = 0; i < 8; ++i ) /* Output full hash to temp buffer */
     store32( buffer + sizeof( S->h[i] ) * i, S->h[i] );
@@ -264,7 +264,7 @@ int blake2s_final( blake2s_state *S, void *out, size_t outlen )
 
 int blake2s( void *out, size_t outlen, const void *in, size_t inlen, const void *key, size_t keylen )
 {
-  blake2s_state S[1];
+  QT6_blake2s_state S[1];
 
   /* Verify parameters */
   if ( NULL == in && inlen > 0 ) return -1;
@@ -279,15 +279,15 @@ int blake2s( void *out, size_t outlen, const void *in, size_t inlen, const void
 
   if( keylen > 0 )
   {
-    if( blake2s_init_key( S, outlen, key, keylen ) < 0 ) return -1;
+    if( QT6_blake2s_init_key( S, outlen, key, keylen ) < 0 ) return -1;
   }
   else
   {
-    if( blake2s_init( S, outlen ) < 0 ) return -1;
+    if( QT6_blake2s_init( S, outlen ) < 0 ) return -1;
   }
 
-  blake2s_update( S, ( const uint8_t * )in, inlen );
-  blake2s_final( S, out, outlen );
+  QT6_blake2s_update( S, ( const uint8_t * )in, inlen );
+  QT6_blake2s_final( S, out, outlen );
   return 0;
 }
 
@@ -319,7 +319,7 @@ int main( void )
     uint8_t hash[BLAKE2S_OUTBYTES];
     blake2s( hash, BLAKE2S_OUTBYTES, buf, i, key, BLAKE2S_KEYBYTES );
 
-    if( 0 != memcmp( hash, blake2s_keyed_kat[i], BLAKE2S_OUTBYTES ) )
+    if( 0 != memcmp( hash, QT6_blake2s_keyed_kat[i], BLAKE2S_OUTBYTES ) )
     {
       goto fail;
     }
@@ -329,30 +329,30 @@ int main( void )
   for(step = 1; step < BLAKE2S_BLOCKBYTES; ++step) {
     for (i = 0; i < BLAKE2_KAT_LENGTH; ++i) {
       uint8_t hash[BLAKE2S_OUTBYTES];
-      blake2s_state S;
+      QT6_blake2s_state S;
       uint8_t * p = buf;
       size_t mlen = i;
       int err = 0;
 
-      if( (err = blake2s_init_key(&S, BLAKE2S_OUTBYTES, key, BLAKE2S_KEYBYTES)) < 0 ) {
+      if( (err = QT6_blake2s_init_key(&S, BLAKE2S_OUTBYTES, key, BLAKE2S_KEYBYTES)) < 0 ) {
         goto fail;
       }
 
       while (mlen >= step) {
-        if ( (err = blake2s_update(&S, p, step)) < 0 ) {
+        if ( (err = QT6_blake2s_update(&S, p, step)) < 0 ) {
           goto fail;
         }
         mlen -= step;
         p += step;
       }
-      if ( (err = blake2s_update(&S, p, mlen)) < 0) {
+      if ( (err = QT6_blake2s_update(&S, p, mlen)) < 0) {
         goto fail;
       }
-      if ( (err = blake2s_final(&S, hash, BLAKE2S_OUTBYTES)) < 0) {
+      if ( (err = QT6_blake2s_final(&S, hash, BLAKE2S_OUTBYTES)) < 0) {
         goto fail;
       }
 
-      if (0 != memcmp(hash, blake2s_keyed_kat[i], BLAKE2S_OUTBYTES)) {
+      if (0 != memcmp(hash, QT6_blake2s_keyed_kat[i], BLAKE2S_OUTBYTES)) {
         goto fail;
       }
     }
diff --git a/src/corelib/tools/qcryptographichash.cpp b/src/corelib/tools/qcryptographichash.cpp
index d71c822ef7..72c4d10928 100644
--- a/src/corelib/tools/qcryptographichash.cpp
+++ b/src/corelib/tools/qcryptographichash.cpp
@@ -366,8 +366,8 @@ public:
         enum class Sha3Variant { Sha3, Keccak };
         void sha3Finish(HashResult &result, int bitCount, Sha3Variant sha3Variant);
 #endif
-        blake2b_state blake2bContext;
-        blake2s_state blake2sContext;
+        QT6_blake2b_state blake2bContext;
+        QT6_blake2s_state blake2sContext;
 #endif
     } state;
     // protects result in finalize()
@@ -551,12 +551,12 @@ QCryptographicHashPrivate::State::State(QCryptographicHash::Algorithm method)
     if (method == QCryptographicHash::Blake2b_160 ||
         method == QCryptographicHash::Blake2b_256 ||
         method == QCryptographicHash::Blake2b_384) {
-        new (&blake2bContext) blake2b_state;
+        new (&blake2bContext) QT6_blake2b_state;
         reset(method);
     } else if (method == QCryptographicHash::Blake2s_128 ||
                method == QCryptographicHash::Blake2s_160 ||
                method == QCryptographicHash::Blake2s_224) {
-        new (&blake2sContext) blake2s_state;
+        new (&blake2sContext) QT6_blake2s_state;
         reset(method);
     } else {
         new (&evp) EVP(method);
@@ -654,13 +654,13 @@ QCryptographicHashPrivate::State::State(QCryptographicHash::Algorithm method)
     case QCryptographicHash::Blake2b_256:
     case QCryptographicHash::Blake2b_384:
     case QCryptographicHash::Blake2b_512:
-        new (&blake2bContext) blake2b_state;
+        new (&blake2bContext) QT6_blake2b_state;
         break;
     case QCryptographicHash::Blake2s_128:
     case QCryptographicHash::Blake2s_160:
     case QCryptographicHash::Blake2s_224:
     case QCryptographicHash::Blake2s_256:
-        new (&blake2sContext) blake2s_state;
+        new (&blake2sContext) QT6_blake2s_state;
         break;
 #endif
     case QCryptographicHash::NumAlgorithms:
@@ -688,11 +688,11 @@ void QCryptographicHashPrivate::State::reset(QCryptographicHash::Algorithm metho
     if (method == QCryptographicHash::Blake2b_160 ||
         method == QCryptographicHash::Blake2b_256 ||
         method == QCryptographicHash::Blake2b_384) {
-        blake2b_init(&blake2bContext, hashLengthInternal(method));
+        QT6_blake2b_init(&blake2bContext, hashLengthInternal(method));
     } else if (method == QCryptographicHash::Blake2s_128 ||
                method == QCryptographicHash::Blake2s_160 ||
                method == QCryptographicHash::Blake2s_224) {
-        blake2s_init(&blake2sContext, hashLengthInternal(method));
+        QT6_blake2s_init(&blake2sContext, hashLengthInternal(method));
     } else {
         evp.reset();
     }
@@ -756,13 +756,13 @@ void QCryptographicHashPrivate::State::reset(QCryptographicHash::Algorithm metho
     case QCryptographicHash::Blake2b_256:
     case QCryptographicHash::Blake2b_384:
     case QCryptographicHash::Blake2b_512:
-        blake2b_init(&blake2bContext, hashLengthInternal(method));
+        QT6_blake2b_init(&blake2bContext, hashLengthInternal(method));
         break;
     case QCryptographicHash::Blake2s_128:
     case QCryptographicHash::Blake2s_160:
     case QCryptographicHash::Blake2s_224:
     case QCryptographicHash::Blake2s_256:
-        blake2s_init(&blake2sContext, hashLengthInternal(method));
+        QT6_blake2s_init(&blake2sContext, hashLengthInternal(method));
         break;
 #endif
     case QCryptographicHash::NumAlgorithms:
@@ -816,11 +816,11 @@ void QCryptographicHashPrivate::State::addData(QCryptographicHash::Algorithm met
         if (method == QCryptographicHash::Blake2b_160 ||
             method == QCryptographicHash::Blake2b_256 ||
             method == QCryptographicHash::Blake2b_384) {
-            blake2b_update(&blake2bContext, reinterpret_cast<const uint8_t *>(data), length);
+            QT6_blake2b_update(&blake2bContext, reinterpret_cast<const uint8_t *>(data), length);
         } else if (method == QCryptographicHash::Blake2s_128 ||
                 method == QCryptographicHash::Blake2s_160 ||
                 method == QCryptographicHash::Blake2s_224) {
-            blake2s_update(&blake2sContext, reinterpret_cast<const uint8_t *>(data), length);
+            QT6_blake2s_update(&blake2sContext, reinterpret_cast<const uint8_t *>(data), length);
         } else if (!evp.initializationFailed) {
             EVP_DigestUpdate(evp.context.get(), (const unsigned char *)data, length);
         }
@@ -886,13 +886,13 @@ void QCryptographicHashPrivate::State::addData(QCryptographicHash::Algorithm met
         case QCryptographicHash::Blake2b_256:
         case QCryptographicHash::Blake2b_384:
         case QCryptographicHash::Blake2b_512:
-            blake2b_update(&blake2bContext, reinterpret_cast<const uint8_t *>(data), length);
+            QT6_blake2b_update(&blake2bContext, reinterpret_cast<const uint8_t *>(data), length);
             break;
         case QCryptographicHash::Blake2s_128:
         case QCryptographicHash::Blake2s_160:
         case QCryptographicHash::Blake2s_224:
         case QCryptographicHash::Blake2s_256:
-            blake2s_update(&blake2sContext, reinterpret_cast<const uint8_t *>(data), length);
+            QT6_blake2s_update(&blake2sContext, reinterpret_cast<const uint8_t *>(data), length);
             break;
 #endif
         case QCryptographicHash::NumAlgorithms:
@@ -991,16 +991,16 @@ void QCryptographicHashPrivate::State::finalizeUnchecked(QCryptographicHash::Alg
         method == QCryptographicHash::Blake2b_256 ||
         method == QCryptographicHash::Blake2b_384) {
         const auto length = hashLengthInternal(method);
-        blake2b_state copy = blake2bContext;
+        QT6_blake2b_state copy = blake2bContext;
         result.resizeForOverwrite(length);
-        blake2b_final(&copy, result.data(), length);
+        QT6_blake2b_final(&copy, result.data(), length);
     } else if (method == QCryptographicHash::Blake2s_128 ||
                method == QCryptographicHash::Blake2s_160 ||
                method == QCryptographicHash::Blake2s_224) {
         const auto length = hashLengthInternal(method);
-        blake2s_state copy = blake2sContext;
+        QT6_blake2s_state copy = blake2sContext;
         result.resizeForOverwrite(length);
-        blake2s_final(&copy, result.data(), length);
+        QT6_blake2s_final(&copy, result.data(), length);
     } else {
         evp.finalizeUnchecked(result);
     }
@@ -1090,9 +1090,9 @@ void QCryptographicHashPrivate::State::finalizeUnchecked(QCryptographicHash::Alg
     case QCryptographicHash::Blake2b_384:
     case QCryptographicHash::Blake2b_512: {
         const auto length = hashLengthInternal(method);
-        blake2b_state copy = blake2bContext;
+        QT6_blake2b_state copy = blake2bContext;
         result.resizeForOverwrite(length);
-        blake2b_final(&copy, result.data(), length);
+        QT6_blake2b_final(&copy, result.data(), length);
         break;
     }
     case QCryptographicHash::Blake2s_128:
@@ -1100,9 +1100,9 @@ void QCryptographicHashPrivate::State::finalizeUnchecked(QCryptographicHash::Alg
     case QCryptographicHash::Blake2s_224:
     case QCryptographicHash::Blake2s_256: {
         const auto length = hashLengthInternal(method);
-        blake2s_state copy = blake2sContext;
+        QT6_blake2s_state copy = blake2sContext;
         result.resizeForOverwrite(length);
-        blake2s_final(&copy, result.data(), length);
+        QT6_blake2s_final(&copy, result.data(), length);
         break;
     }
 #endif
diff --git a/tests/auto/corelib/tools/qcryptographichash/tst_qcryptographichash.cpp b/tests/auto/corelib/tools/qcryptographichash/tst_qcryptographichash.cpp
index a7c22ffe29..8acadc93ec 100644
--- a/tests/auto/corelib/tools/qcryptographichash/tst_qcryptographichash.cpp
+++ b/tests/auto/corelib/tools/qcryptographichash/tst_qcryptographichash.cpp
@@ -268,83 +268,83 @@ void tst_QCryptographicHash::blake2_data()
     QTest::newRow(Tag) << Algorithm << QByteArrayLiteral(Input) << QByteArray::fromHex(Result)
 
     // BLAKE2b
-    ROW("blake2b_160_pangram",
+    ROW("QT6_blake2b_160_pangram",
         QCryptographicHash::Blake2b_160,
         "The quick brown fox jumps over the lazy dog",
         "3c523ed102ab45a37d54f5610d5a983162fde84f");
 
-    ROW("blake2b_160_pangram_dot",
+    ROW("QT6_blake2b_160_pangram_dot",
         QCryptographicHash::Blake2b_160,
         "The quick brown fox jumps over the lazy dog.",
         "d0c8bb0bdd830296d1d4f4348176699ccccc16bb");
 
-    ROW("blake2b_256_pangram",
+    ROW("QT6_blake2b_256_pangram",
         QCryptographicHash::Blake2b_256,
         "The quick brown fox jumps over the lazy dog",
         "01718cec35cd3d796dd00020e0bfecb473ad23457d063b75eff29c0ffa2e58a9");
 
-    ROW("blake2b_256_pangram_dot",
+    ROW("QT6_blake2b_256_pangram_dot",
         QCryptographicHash::Blake2b_256,
         "The quick brown fox jumps over the lazy dog.",
         "69d7d3b0afba81826d27024c17f7f183659ed0812cf27b382eaef9fdc29b5712");
 
-    ROW("blake2b_384_pangram",
+    ROW("QT6_blake2b_384_pangram",
         QCryptographicHash::Blake2b_384,
         "The quick brown fox jumps over the lazy dog",
         "b7c81b228b6bd912930e8f0b5387989691c1cee1e65aade4da3b86a3c9f678fc8018f6ed9e2906720c8d2a3aeda9c03d");
 
-    ROW("blake2b_384_pangram_dot",
+    ROW("QT6_blake2b_384_pangram_dot",
         QCryptographicHash::Blake2b_384,
         "The quick brown fox jumps over the lazy dog.",
         "16d65de1a3caf1c26247234c39af636284c7e19ca448c0de788272081410778852c94d9cef6b939968d4f872c7f78337");
 
-    ROW("blake2b_512_pangram",
+    ROW("QT6_blake2b_512_pangram",
         QCryptographicHash::Blake2b_512,
         "The quick brown fox jumps over the lazy dog",
         "a8add4bdddfd93e4877d2746e62817b116364a1fa7bc148d95090bc7333b3673f82401cf7aa2e4cb1ecd90296e3f14cb5413f8ed77be73045b13914cdcd6a918");
 
-    ROW("blake2b_512_pangram_dot",
+    ROW("QT6_blake2b_512_pangram_dot",
         QCryptographicHash::Blake2b_512,
         "The quick brown fox jumps over the lazy dog.",
         "87af9dc4afe5651b7aa89124b905fd214bf17c79af58610db86a0fb1e0194622a4e9d8e395b352223a8183b0d421c0994b98286cbf8c68a495902e0fe6e2bda2");
 
     // BLAKE2s
-    ROW("blake2s_128_pangram",
+    ROW("QT6_blake2s_128_pangram",
         QCryptographicHash::Blake2s_128,
         "The quick brown fox jumps over the lazy dog",
         "96fd07258925748a0d2fb1c8a1167a73");
 
-    ROW("blake2s_128_pangram_dot",
+    ROW("QT6_blake2s_128_pangram_dot",
         QCryptographicHash::Blake2s_128,
         "The quick brown fox jumps over the lazy dog.",
         "1f298f2e1f9c2490e506c2308f64e7c0");
 
-    ROW("blake2s_160_pangram",
+    ROW("QT6_blake2s_160_pangram",
         QCryptographicHash::Blake2s_160,
         "The quick brown fox jumps over the lazy dog",
         "5a604fec9713c369e84b0ed68daed7d7504ef240");
 
-    ROW("blake2s_160_pangram_dot",
+    ROW("QT6_blake2s_160_pangram_dot",
         QCryptographicHash::Blake2s_160,
         "The quick brown fox jumps over the lazy dog.",
         "cd4a863226463aac852662d16275d399966e3ffe");
 
-    ROW("blake2s_224_pangram",
+    ROW("QT6_blake2s_224_pangram",
         QCryptographicHash::Blake2s_224,
         "The quick brown fox jumps over the lazy dog",
         "e4e5cb6c7cae41982b397bf7b7d2d9d1949823ae78435326e8db4912");
 
-    ROW("blake2s_224_pangram_dot",
+    ROW("QT6_blake2s_224_pangram_dot",
         QCryptographicHash::Blake2s_224,
         "The quick brown fox jumps over the lazy dog.",
         "fd1557500ef49f308882969507acd18a13e155c26f8fcd82f9bf2ff7");
 
-    ROW("blake2s_256_pangram",
+    ROW("QT6_blake2s_256_pangram",
         QCryptographicHash::Blake2s_256,
         "The quick brown fox jumps over the lazy dog",
         "606beeec743ccbeff6cbcdf5d5302aa855c256c29b88c8ed331ea1a6bf3c8812");
 
-    ROW("blake2s_256_pangram_dot",
+    ROW("QT6_blake2s_256_pangram_dot",
         QCryptographicHash::Blake2s_256,
         "The quick brown fox jumps over the lazy dog.",
         "95bca6e1b761dca1323505cc629949a0e03edf11633cc7935bd8b56f393afcf2");
